# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
import sys, os
sys.path.append(r'/03aq_test/aidi_vision')
os.environ['path'] += ';D:/00myGitHub/00MyMLStudy/03aq_test/aidi_vision'
from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import aidi_vision_py
else:
    #from . import aidi_vision_py
    import aidi_vision_py

try:
    import builtins as __builtin__
except ImportError:
    #import __builtin__
    pass

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = aidi_vision_py.delete_SwigPyIterator

    def value(self):
        return aidi_vision_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return aidi_vision_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return aidi_vision_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return aidi_vision_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return aidi_vision_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return aidi_vision_py.SwigPyIterator_copy(self)

    def next(self):
        return aidi_vision_py.SwigPyIterator_next(self)

    def __next__(self):
        return aidi_vision_py.SwigPyIterator___next__(self)

    def previous(self):
        return aidi_vision_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return aidi_vision_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return aidi_vision_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return aidi_vision_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return aidi_vision_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return aidi_vision_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return aidi_vision_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return aidi_vision_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in aidi_vision_py:
aidi_vision_py.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return aidi_vision_py.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return aidi_vision_py.IntVector___nonzero__(self)

    def __bool__(self):
        return aidi_vision_py.IntVector___bool__(self)

    def __len__(self):
        return aidi_vision_py.IntVector___len__(self)

    def __getslice__(self, i, j):
        return aidi_vision_py.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return aidi_vision_py.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return aidi_vision_py.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return aidi_vision_py.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return aidi_vision_py.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return aidi_vision_py.IntVector___setitem__(self, *args)

    def pop(self):
        return aidi_vision_py.IntVector_pop(self)

    def append(self, x):
        return aidi_vision_py.IntVector_append(self, x)

    def empty(self):
        return aidi_vision_py.IntVector_empty(self)

    def size(self):
        return aidi_vision_py.IntVector_size(self)

    def swap(self, v):
        return aidi_vision_py.IntVector_swap(self, v)

    def begin(self):
        return aidi_vision_py.IntVector_begin(self)

    def end(self):
        return aidi_vision_py.IntVector_end(self)

    def rbegin(self):
        return aidi_vision_py.IntVector_rbegin(self)

    def rend(self):
        return aidi_vision_py.IntVector_rend(self)

    def clear(self):
        return aidi_vision_py.IntVector_clear(self)

    def get_allocator(self):
        return aidi_vision_py.IntVector_get_allocator(self)

    def pop_back(self):
        return aidi_vision_py.IntVector_pop_back(self)

    def erase(self, *args):
        return aidi_vision_py.IntVector_erase(self, *args)

    def __init__(self, *args):
        aidi_vision_py.IntVector_swiginit(self, aidi_vision_py.new_IntVector(*args))

    def push_back(self, x):
        return aidi_vision_py.IntVector_push_back(self, x)

    def front(self):
        return aidi_vision_py.IntVector_front(self)

    def back(self):
        return aidi_vision_py.IntVector_back(self)

    def assign(self, n, x):
        return aidi_vision_py.IntVector_assign(self, n, x)

    def resize(self, *args):
        return aidi_vision_py.IntVector_resize(self, *args)

    def insert(self, *args):
        return aidi_vision_py.IntVector_insert(self, *args)

    def reserve(self, n):
        return aidi_vision_py.IntVector_reserve(self, n)

    def capacity(self):
        return aidi_vision_py.IntVector_capacity(self)
    __swig_destroy__ = aidi_vision_py.delete_IntVector

# Register IntVector in aidi_vision_py:
aidi_vision_py.IntVector_swigregister(IntVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return aidi_vision_py.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return aidi_vision_py.StringVector___nonzero__(self)

    def __bool__(self):
        return aidi_vision_py.StringVector___bool__(self)

    def __len__(self):
        return aidi_vision_py.StringVector___len__(self)

    def __getslice__(self, i, j):
        return aidi_vision_py.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return aidi_vision_py.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return aidi_vision_py.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return aidi_vision_py.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return aidi_vision_py.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return aidi_vision_py.StringVector___setitem__(self, *args)

    def pop(self):
        return aidi_vision_py.StringVector_pop(self)

    def append(self, x):
        return aidi_vision_py.StringVector_append(self, x)

    def empty(self):
        return aidi_vision_py.StringVector_empty(self)

    def size(self):
        return aidi_vision_py.StringVector_size(self)

    def swap(self, v):
        return aidi_vision_py.StringVector_swap(self, v)

    def begin(self):
        return aidi_vision_py.StringVector_begin(self)

    def end(self):
        return aidi_vision_py.StringVector_end(self)

    def rbegin(self):
        return aidi_vision_py.StringVector_rbegin(self)

    def rend(self):
        return aidi_vision_py.StringVector_rend(self)

    def clear(self):
        return aidi_vision_py.StringVector_clear(self)

    def get_allocator(self):
        return aidi_vision_py.StringVector_get_allocator(self)

    def pop_back(self):
        return aidi_vision_py.StringVector_pop_back(self)

    def erase(self, *args):
        return aidi_vision_py.StringVector_erase(self, *args)

    def __init__(self, *args):
        aidi_vision_py.StringVector_swiginit(self, aidi_vision_py.new_StringVector(*args))

    def push_back(self, x):
        return aidi_vision_py.StringVector_push_back(self, x)

    def front(self):
        return aidi_vision_py.StringVector_front(self)

    def back(self):
        return aidi_vision_py.StringVector_back(self)

    def assign(self, n, x):
        return aidi_vision_py.StringVector_assign(self, n, x)

    def resize(self, *args):
        return aidi_vision_py.StringVector_resize(self, *args)

    def insert(self, *args):
        return aidi_vision_py.StringVector_insert(self, *args)

    def reserve(self, n):
        return aidi_vision_py.StringVector_reserve(self, n)

    def capacity(self):
        return aidi_vision_py.StringVector_capacity(self)
    __swig_destroy__ = aidi_vision_py.delete_StringVector

# Register StringVector in aidi_vision_py:
aidi_vision_py.StringVector_swigregister(StringVector)

class StringFloatMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return aidi_vision_py.StringFloatMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return aidi_vision_py.StringFloatMap___nonzero__(self)

    def __bool__(self):
        return aidi_vision_py.StringFloatMap___bool__(self)

    def __len__(self):
        return aidi_vision_py.StringFloatMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return aidi_vision_py.StringFloatMap___getitem__(self, key)

    def __delitem__(self, key):
        return aidi_vision_py.StringFloatMap___delitem__(self, key)

    def has_key(self, key):
        return aidi_vision_py.StringFloatMap_has_key(self, key)

    def keys(self):
        return aidi_vision_py.StringFloatMap_keys(self)

    def values(self):
        return aidi_vision_py.StringFloatMap_values(self)

    def items(self):
        return aidi_vision_py.StringFloatMap_items(self)

    def __contains__(self, key):
        return aidi_vision_py.StringFloatMap___contains__(self, key)

    def key_iterator(self):
        return aidi_vision_py.StringFloatMap_key_iterator(self)

    def value_iterator(self):
        return aidi_vision_py.StringFloatMap_value_iterator(self)

    def __setitem__(self, *args):
        return aidi_vision_py.StringFloatMap___setitem__(self, *args)

    def asdict(self):
        return aidi_vision_py.StringFloatMap_asdict(self)

    def __init__(self, *args):
        aidi_vision_py.StringFloatMap_swiginit(self, aidi_vision_py.new_StringFloatMap(*args))

    def empty(self):
        return aidi_vision_py.StringFloatMap_empty(self)

    def size(self):
        return aidi_vision_py.StringFloatMap_size(self)

    def swap(self, v):
        return aidi_vision_py.StringFloatMap_swap(self, v)

    def begin(self):
        return aidi_vision_py.StringFloatMap_begin(self)

    def end(self):
        return aidi_vision_py.StringFloatMap_end(self)

    def rbegin(self):
        return aidi_vision_py.StringFloatMap_rbegin(self)

    def rend(self):
        return aidi_vision_py.StringFloatMap_rend(self)

    def clear(self):
        return aidi_vision_py.StringFloatMap_clear(self)

    def get_allocator(self):
        return aidi_vision_py.StringFloatMap_get_allocator(self)

    def count(self, x):
        return aidi_vision_py.StringFloatMap_count(self, x)

    def erase(self, *args):
        return aidi_vision_py.StringFloatMap_erase(self, *args)

    def find(self, x):
        return aidi_vision_py.StringFloatMap_find(self, x)

    def lower_bound(self, x):
        return aidi_vision_py.StringFloatMap_lower_bound(self, x)

    def upper_bound(self, x):
        return aidi_vision_py.StringFloatMap_upper_bound(self, x)
    __swig_destroy__ = aidi_vision_py.delete_StringFloatMap

# Register StringFloatMap in aidi_vision_py:
aidi_vision_py.StringFloatMap_swigregister(StringFloatMap)

class C_LabelIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_LabelIO_swiginit(self, aidi_vision_py.new_C_LabelIO())
    __swig_destroy__ = aidi_vision_py.delete_C_LabelIO

# Register C_LabelIO in aidi_vision_py:
aidi_vision_py.C_LabelIO_swigregister(C_LabelIO)

class LabelIO(C_LabelIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def ReadFrom(*args):
        return aidi_vision_py.LabelIO_ReadFrom(*args)

    def __init__(self, *args):
        aidi_vision_py.LabelIO_swiginit(self, aidi_vision_py.new_LabelIO(*args))
    __swig_destroy__ = aidi_vision_py.delete_LabelIO

    def size(self):
        return aidi_vision_py.LabelIO_size(self)

    def alloc_data(self, len):
        return aidi_vision_py.LabelIO_alloc_data(self, len)

    def mutable_data(self):
        return aidi_vision_py.LabelIO_mutable_data(self)

    def data(self, *args):
        return aidi_vision_py.LabelIO_data(self, *args)

    def data2str(self):
        return aidi_vision_py.LabelIO_data2str(self)

    def clear(self):
        return aidi_vision_py.LabelIO_clear(self)

    def empty(self):
        return aidi_vision_py.LabelIO_empty(self)

    def set_data(self, *args):
        return aidi_vision_py.LabelIO_set_data(self, *args)

    def read_from(self, *args):
        return aidi_vision_py.LabelIO_read_from(self, *args)

    def save_to(self, *args):
        return aidi_vision_py.LabelIO_save_to(self, *args)

    def to_string(self):
        return aidi_vision_py.LabelIO_to_string(self)

    def to_short_string(self):
        return aidi_vision_py.LabelIO_to_short_string(self)

    def to_json(self):
        return aidi_vision_py.LabelIO_to_json(self)

    def from_json(self, json_str):
        return aidi_vision_py.LabelIO_from_json(self, json_str)

# Register LabelIO in aidi_vision_py:
aidi_vision_py.LabelIO_swigregister(LabelIO)

def LabelIO_ReadFrom(*args):
    return aidi_vision_py.LabelIO_ReadFrom(*args)


def read_33X_segment_label(*args):
    return aidi_vision_py.read_33X_segment_label(*args)

def read_33X_detection_label(path, label):
    return aidi_vision_py.read_33X_detection_label(path, label)

def read_33X_classify_label(label_path, image_path, label):
    return aidi_vision_py.read_33X_classify_label(label_path, image_path, label)

def read_labelimg_detection_xml_label(path, label):
    return aidi_vision_py.read_labelimg_detection_xml_label(path, label)

def read_labelimg_detection_json_label(label_path, width, height, label):
    return aidi_vision_py.read_labelimg_detection_json_label(label_path, width, height, label)

def read_labelme_segment_label(label_path, label):
    return aidi_vision_py.read_labelme_segment_label(label_path, label)
class BatchLabelIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return aidi_vision_py.BatchLabelIO_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return aidi_vision_py.BatchLabelIO___nonzero__(self)

    def __bool__(self):
        return aidi_vision_py.BatchLabelIO___bool__(self)

    def __len__(self):
        return aidi_vision_py.BatchLabelIO___len__(self)

    def __getslice__(self, i, j):
        return aidi_vision_py.BatchLabelIO___getslice__(self, i, j)

    def __setslice__(self, *args):
        return aidi_vision_py.BatchLabelIO___setslice__(self, *args)

    def __delslice__(self, i, j):
        return aidi_vision_py.BatchLabelIO___delslice__(self, i, j)

    def __delitem__(self, *args):
        return aidi_vision_py.BatchLabelIO___delitem__(self, *args)

    def __getitem__(self, *args):
        return aidi_vision_py.BatchLabelIO___getitem__(self, *args)

    def __setitem__(self, *args):
        return aidi_vision_py.BatchLabelIO___setitem__(self, *args)

    def pop(self):
        return aidi_vision_py.BatchLabelIO_pop(self)

    def append(self, x):
        return aidi_vision_py.BatchLabelIO_append(self, x)

    def empty(self):
        return aidi_vision_py.BatchLabelIO_empty(self)

    def size(self):
        return aidi_vision_py.BatchLabelIO_size(self)

    def swap(self, v):
        return aidi_vision_py.BatchLabelIO_swap(self, v)

    def begin(self):
        return aidi_vision_py.BatchLabelIO_begin(self)

    def end(self):
        return aidi_vision_py.BatchLabelIO_end(self)

    def rbegin(self):
        return aidi_vision_py.BatchLabelIO_rbegin(self)

    def rend(self):
        return aidi_vision_py.BatchLabelIO_rend(self)

    def clear(self):
        return aidi_vision_py.BatchLabelIO_clear(self)

    def get_allocator(self):
        return aidi_vision_py.BatchLabelIO_get_allocator(self)

    def pop_back(self):
        return aidi_vision_py.BatchLabelIO_pop_back(self)

    def erase(self, *args):
        return aidi_vision_py.BatchLabelIO_erase(self, *args)

    def __init__(self, *args):
        aidi_vision_py.BatchLabelIO_swiginit(self, aidi_vision_py.new_BatchLabelIO(*args))

    def push_back(self, x):
        return aidi_vision_py.BatchLabelIO_push_back(self, x)

    def front(self):
        return aidi_vision_py.BatchLabelIO_front(self)

    def back(self):
        return aidi_vision_py.BatchLabelIO_back(self)

    def assign(self, n, x):
        return aidi_vision_py.BatchLabelIO_assign(self, n, x)

    def resize(self, *args):
        return aidi_vision_py.BatchLabelIO_resize(self, *args)

    def insert(self, *args):
        return aidi_vision_py.BatchLabelIO_insert(self, *args)

    def reserve(self, n):
        return aidi_vision_py.BatchLabelIO_reserve(self, n)

    def capacity(self):
        return aidi_vision_py.BatchLabelIO_capacity(self)
    __swig_destroy__ = aidi_vision_py.delete_BatchLabelIO

# Register BatchLabelIO in aidi_vision_py:
aidi_vision_py.BatchLabelIO_swigregister(BatchLabelIO)

class C_Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_Image_swiginit(self, aidi_vision_py.new_C_Image())
    __swig_destroy__ = aidi_vision_py.delete_C_Image

# Register C_Image in aidi_vision_py:
aidi_vision_py.C_Image_swigregister(C_Image)

class Image(C_Image):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Depth_U8 = aidi_vision_py.Image_Depth_U8
    Depth_U16 = aidi_vision_py.Image_Depth_U16
    Depth_F32 = aidi_vision_py.Image_Depth_F32

    def __init__(self, *args):
        aidi_vision_py.Image_swiginit(self, aidi_vision_py.new_Image(*args))
    __swig_destroy__ = aidi_vision_py.delete_Image

    def roi(self, x, y, w, h):
        return aidi_vision_py.Image_roi(self, x, y, w, h)

    def resize(self, width, height):
        return aidi_vision_py.Image_resize(self, width, height)

    def convert_channel(self, target_channel):
        return aidi_vision_py.Image_convert_channel(self, target_channel)

    def convert_depth(self, depth):
        return aidi_vision_py.Image_convert_depth(self, depth)

    def crop(self, label, auto_mask=False):
        return aidi_vision_py.Image_crop(self, label, auto_mask)

    def draw(self, label):
        return aidi_vision_py.Image_draw(self, label)

    def clone(self, visual_idx=-1):
        return aidi_vision_py.Image_clone(self, visual_idx)

    def visual_at(self, visual_idx):
        return aidi_vision_py.Image_visual_at(self, visual_idx)

    def from_file(self, path, flag=-1):
        return aidi_vision_py.Image_from_file(self, path, flag)

    def from_files(self, paths, flag=-1):
        return aidi_vision_py.Image_from_files(self, paths, flag)

    def to_file(self, path):
        return aidi_vision_py.Image_to_file(self, path)

    def from_batch(self, images):
        return aidi_vision_py.Image_from_batch(self, images)

    def decode(self, data, flag=-1):
        return aidi_vision_py.Image_decode(self, data, flag)

    def encode(self, *args):
        return aidi_vision_py.Image_encode(self, *args)

    def show(self, *args):
        return aidi_vision_py.Image_show(self, *args)

    def from_chars(self, *args):
        return aidi_vision_py.Image_from_chars(self, *args)

    def to_chars(self, outbuf, buf_size):
        return aidi_vision_py.Image_to_chars(self, outbuf, buf_size)

    def data(self, visual_idx=0):
        return aidi_vision_py.Image_data(self, visual_idx)

    def mutable_data(self, visual_idx=0):
        return aidi_vision_py.Image_mutable_data(self, visual_idx)

    def data_size(self, visual_idx=0):
        return aidi_vision_py.Image_data_size(self, visual_idx)

    def data_byte_size(self, visual_idx=0):
        return aidi_vision_py.Image_data_byte_size(self, visual_idx)

    def height(self):
        return aidi_vision_py.Image_height(self)

    def width(self):
        return aidi_vision_py.Image_width(self)

    def total_channels(self):
        return aidi_vision_py.Image_total_channels(self)

    def channels(self, *args):
        return aidi_vision_py.Image_channels(self, *args)

    def depth(self, visual_idx=0):
        return aidi_vision_py.Image_depth(self, visual_idx)

    def empty(self):
        return aidi_vision_py.Image_empty(self)

    def visual_size(self):
        return aidi_vision_py.Image_visual_size(self)

    def is_multi_visual(self):
        return aidi_vision_py.Image_is_multi_visual(self)

    def release(self):
        return aidi_vision_py.Image_release(self)

# Register Image in aidi_vision_py:
aidi_vision_py.Image_swigregister(Image)

class BatchImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return aidi_vision_py.BatchImage_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return aidi_vision_py.BatchImage___nonzero__(self)

    def __bool__(self):
        return aidi_vision_py.BatchImage___bool__(self)

    def __len__(self):
        return aidi_vision_py.BatchImage___len__(self)

    def __getslice__(self, i, j):
        return aidi_vision_py.BatchImage___getslice__(self, i, j)

    def __setslice__(self, *args):
        return aidi_vision_py.BatchImage___setslice__(self, *args)

    def __delslice__(self, i, j):
        return aidi_vision_py.BatchImage___delslice__(self, i, j)

    def __delitem__(self, *args):
        return aidi_vision_py.BatchImage___delitem__(self, *args)

    def __getitem__(self, *args):
        return aidi_vision_py.BatchImage___getitem__(self, *args)

    def __setitem__(self, *args):
        return aidi_vision_py.BatchImage___setitem__(self, *args)

    def pop(self):
        return aidi_vision_py.BatchImage_pop(self)

    def append(self, x):
        return aidi_vision_py.BatchImage_append(self, x)

    def empty(self):
        return aidi_vision_py.BatchImage_empty(self)

    def size(self):
        return aidi_vision_py.BatchImage_size(self)

    def swap(self, v):
        return aidi_vision_py.BatchImage_swap(self, v)

    def begin(self):
        return aidi_vision_py.BatchImage_begin(self)

    def end(self):
        return aidi_vision_py.BatchImage_end(self)

    def rbegin(self):
        return aidi_vision_py.BatchImage_rbegin(self)

    def rend(self):
        return aidi_vision_py.BatchImage_rend(self)

    def clear(self):
        return aidi_vision_py.BatchImage_clear(self)

    def get_allocator(self):
        return aidi_vision_py.BatchImage_get_allocator(self)

    def pop_back(self):
        return aidi_vision_py.BatchImage_pop_back(self)

    def erase(self, *args):
        return aidi_vision_py.BatchImage_erase(self, *args)

    def __init__(self, *args):
        aidi_vision_py.BatchImage_swiginit(self, aidi_vision_py.new_BatchImage(*args))

    def push_back(self, x):
        return aidi_vision_py.BatchImage_push_back(self, x)

    def front(self):
        return aidi_vision_py.BatchImage_front(self)

    def back(self):
        return aidi_vision_py.BatchImage_back(self)

    def assign(self, n, x):
        return aidi_vision_py.BatchImage_assign(self, n, x)

    def resize(self, *args):
        return aidi_vision_py.BatchImage_resize(self, *args)

    def insert(self, *args):
        return aidi_vision_py.BatchImage_insert(self, *args)

    def reserve(self, n):
        return aidi_vision_py.BatchImage_reserve(self, n)

    def capacity(self):
        return aidi_vision_py.BatchImage_capacity(self)
    __swig_destroy__ = aidi_vision_py.delete_BatchImage

# Register BatchImage in aidi_vision_py:
aidi_vision_py.BatchImage_swigregister(BatchImage)

class CustomProcessBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CustomProcessBase:
            _self = None
        else:
            _self = self
        aidi_vision_py.CustomProcessBase_swiginit(self, aidi_vision_py.new_CustomProcessBase(_self, ))
    __swig_destroy__ = aidi_vision_py.delete_CustomProcessBase

    def need_pre_process(self):
        return aidi_vision_py.CustomProcessBase_need_pre_process(self)

    def need_post_process(self):
        return aidi_vision_py.CustomProcessBase_need_post_process(self)

    def need_post_process_only_label(self):
        return aidi_vision_py.CustomProcessBase_need_post_process_only_label(self)

    def pre_process(self, arg0):
        return aidi_vision_py.CustomProcessBase_pre_process(self, arg0)

    def post_process(self, arg0, arg1):
        return aidi_vision_py.CustomProcessBase_post_process(self, arg0, arg1)

    def post_process_only_label(self, arg0):
        return aidi_vision_py.CustomProcessBase_post_process_only_label(self, arg0)
    def __disown__(self):
        self.this.disown()
        aidi_vision_py.disown_CustomProcessBase(self)
        return weakref.proxy(self)

# Register CustomProcessBase in aidi_vision_py:
aidi_vision_py.CustomProcessBase_swigregister(CustomProcessBase)

class ErrorStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = property(aidi_vision_py.ErrorStatus_code_get, aidi_vision_py.ErrorStatus_code_set)
    error = property(aidi_vision_py.ErrorStatus_error_get, aidi_vision_py.ErrorStatus_error_set)
    detail = property(aidi_vision_py.ErrorStatus_detail_get, aidi_vision_py.ErrorStatus_detail_set)

    def ok(self):
        return aidi_vision_py.ErrorStatus_ok(self)

    def __init__(self):
        aidi_vision_py.ErrorStatus_swiginit(self, aidi_vision_py.new_ErrorStatus())
    __swig_destroy__ = aidi_vision_py.delete_ErrorStatus

# Register ErrorStatus in aidi_vision_py:
aidi_vision_py.ErrorStatus_swigregister(ErrorStatus)

class C_Client(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_Client_swiginit(self, aidi_vision_py.new_C_Client())
    __swig_destroy__ = aidi_vision_py.delete_C_Client

# Register C_Client in aidi_vision_py:
aidi_vision_py.C_Client_swigregister(C_Client)

class Client(C_Client):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        aidi_vision_py.Client_swiginit(self, aidi_vision_py.new_Client(*args))
    __swig_destroy__ = aidi_vision_py.delete_Client

    def load_task(self, task_info):
        return aidi_vision_py.Client_load_task(self, task_info)

    def max_iters(self):
        return aidi_vision_py.Client_max_iters(self)

    def start(self):
        return aidi_vision_py.Client_start(self)

    def stop(self):
        return aidi_vision_py.Client_stop(self)

    def get_avg_time(self):
        return aidi_vision_py.Client_get_avg_time(self)

    def get_current_index(self):
        return aidi_vision_py.Client_get_current_index(self)

    def get_used_gpus(self):
        return aidi_vision_py.Client_get_used_gpus(self)

    def add_model_engine(self, *args):
        return aidi_vision_py.Client_add_model_engine(self, *args)

    def set_ctm_proc_on_engine(self, id, ctm_proc):
        return aidi_vision_py.Client_set_ctm_proc_on_engine(self, id, ctm_proc)

    def add_sort_engine(self, start_id=0):
        return aidi_vision_py.Client_add_sort_engine(self, start_id)

    def add_route_engine(self):
        return aidi_vision_py.Client_add_route_engine(self)

    def add_images(self, *args):
        return aidi_vision_py.Client_add_images(self, *args)

    def try_get_result(self, *args):
        return aidi_vision_py.Client_try_get_result(self, *args)

    def wait_get_result(self, *args):
        return aidi_vision_py.Client_wait_get_result(self, *args)

# Register Client in aidi_vision_py:
aidi_vision_py.Client_swigregister(Client)

class C_Trainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_Trainer_swiginit(self, aidi_vision_py.new_C_Trainer())
    __swig_destroy__ = aidi_vision_py.delete_C_Trainer

# Register C_Trainer in aidi_vision_py:
aidi_vision_py.C_Trainer_swigregister(C_Trainer)

class Trainer(C_Trainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        aidi_vision_py.Trainer_swiginit(self, aidi_vision_py.new_Trainer(*args))
    __swig_destroy__ = aidi_vision_py.delete_Trainer

    def load_task(self, taskinfo):
        return aidi_vision_py.Trainer_load_task(self, taskinfo)

    def max_iters(self):
        return aidi_vision_py.Trainer_max_iters(self)

    def start(self, step_by_step=False):
        return aidi_vision_py.Trainer_start(self, step_by_step)

    def step(self, epoch):
        return aidi_vision_py.Trainer_step(self, epoch)

    def is_training(self):
        return aidi_vision_py.Trainer_is_training(self)

    def is_train_over(self):
        return aidi_vision_py.Trainer_is_train_over(self)

    def node_rank(self):
        return aidi_vision_py.Trainer_node_rank(self)

    def node_size(self):
        return aidi_vision_py.Trainer_node_size(self)

    def stop(self):
        return aidi_vision_py.Trainer_stop(self)

    def save_model(self):
        return aidi_vision_py.Trainer_save_model(self)

    def get_used_gpus(self):
        return aidi_vision_py.Trainer_get_used_gpus(self)

    def get_loss(self, loss):
        return aidi_vision_py.Trainer_get_loss(self, loss)

# Register Trainer in aidi_vision_py:
aidi_vision_py.Trainer_swigregister(Trainer)

class C_AidiRunner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_AidiRunner_swiginit(self, aidi_vision_py.new_C_AidiRunner())
    __swig_destroy__ = aidi_vision_py.delete_C_AidiRunner

# Register C_AidiRunner in aidi_vision_py:
aidi_vision_py.C_AidiRunner_swigregister(C_AidiRunner)

class AidiRunner(C_AidiRunner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        aidi_vision_py.AidiRunner_swiginit(self, aidi_vision_py.new_AidiRunner(*args))
    __swig_destroy__ = aidi_vision_py.delete_AidiRunner

    def load_project_model(self, model_path, multi_thread=False):
        return aidi_vision_py.AidiRunner_load_project_model(self, model_path, multi_thread)

    def load_factory_model(self, model_path):
        return aidi_vision_py.AidiRunner_load_factory_model(self, model_path)

    def add_image(self, image):
        return aidi_vision_py.AidiRunner_add_image(self, image)

    def add_images(self, images):
        return aidi_vision_py.AidiRunner_add_images(self, images)

    def wait_get_result(self, id):
        return aidi_vision_py.AidiRunner_wait_get_result(self, id)

    def infer(self, *args):
        return aidi_vision_py.AidiRunner_infer(self, *args)

    def infer_labelio(self, *args):
        return aidi_vision_py.AidiRunner_infer_labelio(self, *args)

# Register AidiRunner in aidi_vision_py:
aidi_vision_py.AidiRunner_swigregister(AidiRunner)

class Entry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def VerifyAuth(*args):
        return aidi_vision_py.Entry_VerifyAuth(*args)

    @staticmethod
    def BindRemoteAuth(auth_code):
        return aidi_vision_py.Entry_BindRemoteAuth(auth_code)

    @staticmethod
    def GetRemoteAuthInfo(*args):
        return aidi_vision_py.Entry_GetRemoteAuthInfo(*args)

    @staticmethod
    def GetLocalAuthInfo(auth_info, read_only):
        return aidi_vision_py.Entry_GetLocalAuthInfo(auth_info, read_only)

    @staticmethod
    def InitAlgoPlugin(*args):
        return aidi_vision_py.Entry_InitAlgoPlugin(*args)

    @staticmethod
    def InitLogFile(file_path):
        return aidi_vision_py.Entry_InitLogFile(file_path)

    @staticmethod
    def InitLogDir(dir_path):
        return aidi_vision_py.Entry_InitLogDir(dir_path)

    @staticmethod
    def SetLogFilter(filter):
        return aidi_vision_py.Entry_SetLogFilter(filter)

    @staticmethod
    def GetDeviceNumber():
        return aidi_vision_py.Entry_GetDeviceNumber()

    @staticmethod
    def GetDeviceInfo():
        return aidi_vision_py.Entry_GetDeviceInfo()

    @staticmethod
    def GetSDKVersion():
        return aidi_vision_py.Entry_GetSDKVersion()

    @staticmethod
    def ModuleNames():
        return aidi_vision_py.Entry_ModuleNames()

    @staticmethod
    def SetCpuMode(flag=True):
        return aidi_vision_py.Entry_SetCpuMode(flag)

    @staticmethod
    def ShutDown():
        return aidi_vision_py.Entry_ShutDown()

    @staticmethod
    def SetErrorHandler(e_h):
        return aidi_vision_py.Entry_SetErrorHandler(e_h)

    @staticmethod
    def NvDeviceIsSupport(device_index=0):
        return aidi_vision_py.Entry_NvDeviceIsSupport(device_index)

    @staticmethod
    def SetLocale(*args):
        return aidi_vision_py.Entry_SetLocale(*args)

# Register Entry in aidi_vision_py:
aidi_vision_py.Entry_swigregister(Entry)

def Entry_VerifyAuth(*args):
    return aidi_vision_py.Entry_VerifyAuth(*args)

def Entry_BindRemoteAuth(auth_code):
    return aidi_vision_py.Entry_BindRemoteAuth(auth_code)

def Entry_GetRemoteAuthInfo(*args):
    return aidi_vision_py.Entry_GetRemoteAuthInfo(*args)

def Entry_GetLocalAuthInfo(auth_info, read_only):
    return aidi_vision_py.Entry_GetLocalAuthInfo(auth_info, read_only)

def Entry_InitAlgoPlugin(*args):
    return aidi_vision_py.Entry_InitAlgoPlugin(*args)

def Entry_InitLogFile(file_path):
    return aidi_vision_py.Entry_InitLogFile(file_path)

def Entry_InitLogDir(dir_path):
    return aidi_vision_py.Entry_InitLogDir(dir_path)

def Entry_SetLogFilter(filter):
    return aidi_vision_py.Entry_SetLogFilter(filter)

def Entry_GetDeviceNumber():
    return aidi_vision_py.Entry_GetDeviceNumber()

def Entry_GetDeviceInfo():
    return aidi_vision_py.Entry_GetDeviceInfo()

def Entry_GetSDKVersion():
    return aidi_vision_py.Entry_GetSDKVersion()

def Entry_ModuleNames():
    return aidi_vision_py.Entry_ModuleNames()

def Entry_SetCpuMode(flag=True):
    return aidi_vision_py.Entry_SetCpuMode(flag)

def Entry_ShutDown():
    return aidi_vision_py.Entry_ShutDown()

def Entry_SetErrorHandler(e_h):
    return aidi_vision_py.Entry_SetErrorHandler(e_h)

def Entry_NvDeviceIsSupport(device_index=0):
    return aidi_vision_py.Entry_NvDeviceIsSupport(device_index)

def Entry_SetLocale(*args):
    return aidi_vision_py.Entry_SetLocale(*args)

class Templ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetTrainParamTemplateString(module_type):
        return aidi_vision_py.Templ_GetTrainParamTemplateString(module_type)

    @staticmethod
    def ValidateTrainParamString(param_str, module_type):
        return aidi_vision_py.Templ_ValidateTrainParamString(param_str, module_type)

    @staticmethod
    def GetTrainParamTemplateFile(path, module_type):
        return aidi_vision_py.Templ_GetTrainParamTemplateFile(path, module_type)

    @staticmethod
    def ValidateTrainParamFile(path, module_type):
        return aidi_vision_py.Templ_ValidateTrainParamFile(path, module_type)

    @staticmethod
    def GetTestParamTemplateString(module_type):
        return aidi_vision_py.Templ_GetTestParamTemplateString(module_type)

    @staticmethod
    def ValidateTestParamString(param_str, module_type):
        return aidi_vision_py.Templ_ValidateTestParamString(param_str, module_type)

    @staticmethod
    def GetTestParamTemplateFile(path, module_type):
        return aidi_vision_py.Templ_GetTestParamTemplateFile(path, module_type)

    @staticmethod
    def ValidateTestParamFile(path, module_type):
        return aidi_vision_py.Templ_ValidateTestParamFile(path, module_type)

    @staticmethod
    def GetTaskInfoTemplateString():
        return aidi_vision_py.Templ_GetTaskInfoTemplateString()

    @staticmethod
    def ValidateTaskInfoString(task_str):
        return aidi_vision_py.Templ_ValidateTaskInfoString(task_str)

    @staticmethod
    def GetTaskInfoTemplateFile(path):
        return aidi_vision_py.Templ_GetTaskInfoTemplateFile(path)

    @staticmethod
    def ValidateTaskInfoFile(path):
        return aidi_vision_py.Templ_ValidateTaskInfoFile(path)

# Register Templ in aidi_vision_py:
aidi_vision_py.Templ_swigregister(Templ)

def Templ_GetTrainParamTemplateString(module_type):
    return aidi_vision_py.Templ_GetTrainParamTemplateString(module_type)

def Templ_ValidateTrainParamString(param_str, module_type):
    return aidi_vision_py.Templ_ValidateTrainParamString(param_str, module_type)

def Templ_GetTrainParamTemplateFile(path, module_type):
    return aidi_vision_py.Templ_GetTrainParamTemplateFile(path, module_type)

def Templ_ValidateTrainParamFile(path, module_type):
    return aidi_vision_py.Templ_ValidateTrainParamFile(path, module_type)

def Templ_GetTestParamTemplateString(module_type):
    return aidi_vision_py.Templ_GetTestParamTemplateString(module_type)

def Templ_ValidateTestParamString(param_str, module_type):
    return aidi_vision_py.Templ_ValidateTestParamString(param_str, module_type)

def Templ_GetTestParamTemplateFile(path, module_type):
    return aidi_vision_py.Templ_GetTestParamTemplateFile(path, module_type)

def Templ_ValidateTestParamFile(path, module_type):
    return aidi_vision_py.Templ_ValidateTestParamFile(path, module_type)

def Templ_GetTaskInfoTemplateString():
    return aidi_vision_py.Templ_GetTaskInfoTemplateString()

def Templ_ValidateTaskInfoString(task_str):
    return aidi_vision_py.Templ_ValidateTaskInfoString(task_str)

def Templ_GetTaskInfoTemplateFile(path):
    return aidi_vision_py.Templ_GetTaskInfoTemplateFile(path)

def Templ_ValidateTaskInfoFile(path):
    return aidi_vision_py.Templ_ValidateTaskInfoFile(path)

class C_TaskEditor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_TaskEditor_swiginit(self, aidi_vision_py.new_C_TaskEditor())
    __swig_destroy__ = aidi_vision_py.delete_C_TaskEditor

# Register C_TaskEditor in aidi_vision_py:
aidi_vision_py.C_TaskEditor_swigregister(C_TaskEditor)

class TaskEditor(C_TaskEditor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.TaskEditor_swiginit(self, aidi_vision_py.new_TaskEditor())

    def read_from(self, path):
        return aidi_vision_py.TaskEditor_read_from(self, path)

    def save_to(self, path):
        return aidi_vision_py.TaskEditor_save_to(self, path)

    def from_json(self, json):
        return aidi_vision_py.TaskEditor_from_json(self, json)

    def to_json(self):
        return aidi_vision_py.TaskEditor_to_json(self)

    def set_root_path(self, path):
        return aidi_vision_py.TaskEditor_set_root_path(self, path)

    def set_image_format(self, format):
        return aidi_vision_py.TaskEditor_set_image_format(self, format)

    def set_model_version(self, ver):
        return aidi_vision_py.TaskEditor_set_model_version(self, ver)

    def set_module_name(self, module):
        return aidi_vision_py.TaskEditor_set_module_name(self, module)

    def set_indexes(self, indexes):
        return aidi_vision_py.TaskEditor_set_indexes(self, indexes)
    __swig_destroy__ = aidi_vision_py.delete_TaskEditor

# Register TaskEditor in aidi_vision_py:
aidi_vision_py.TaskEditor_swigregister(TaskEditor)

class FactoryEditor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.FactoryEditor_swiginit(self, aidi_vision_py.new_FactoryEditor())

    def read_from(self, factory_dir):
        return aidi_vision_py.FactoryEditor_read_from(self, factory_dir)

    def save_to(self, factory_dir, with_export):
        return aidi_vision_py.FactoryEditor_save_to(self, factory_dir, with_export)

    def add_module(self, module_type, model_path):
        return aidi_vision_py.FactoryEditor_add_module(self, module_type, model_path)

    def set_modules(self, module_types, model_paths):
        return aidi_vision_py.FactoryEditor_set_modules(self, module_types, model_paths)

    def clear(self):
        return aidi_vision_py.FactoryEditor_clear(self)

    def size(self):
        return aidi_vision_py.FactoryEditor_size(self)

    def type_at(self, ref):
        return aidi_vision_py.FactoryEditor_type_at(self, ref)

    def path_at(self, ref):
        return aidi_vision_py.FactoryEditor_path_at(self, ref)
    __swig_destroy__ = aidi_vision_py.delete_FactoryEditor

# Register FactoryEditor in aidi_vision_py:
aidi_vision_py.FactoryEditor_swigregister(FactoryEditor)

class C_Evaluator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.C_Evaluator_swiginit(self, aidi_vision_py.new_C_Evaluator())
    __swig_destroy__ = aidi_vision_py.delete_C_Evaluator

# Register C_Evaluator in aidi_vision_py:
aidi_vision_py.C_Evaluator_swigregister(C_Evaluator)

class Evaluator(C_Evaluator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        aidi_vision_py.Evaluator_swiginit(self, aidi_vision_py.new_Evaluator())

    @staticmethod
    def ShowHelp(*args):
        return aidi_vision_py.Evaluator_ShowHelp(*args)

    def load_datas(self, task_str):
        return aidi_vision_py.Evaluator_load_datas(self, task_str)

    def set_roi(self, x, y, w, h):
        return aidi_vision_py.Evaluator_set_roi(self, x, y, w, h)

    def set_global_mask(self, mask_img):
        return aidi_vision_py.Evaluator_set_global_mask(self, mask_img)

    def add_data(self, gt, pred):
        return aidi_vision_py.Evaluator_add_data(self, gt, pred)

    def clear_data(self):
        return aidi_vision_py.Evaluator_clear_data(self)

    def clear(self):
        return aidi_vision_py.Evaluator_clear(self)

    def label_names(self):
        return aidi_vision_py.Evaluator_label_names(self)

    def eval(self, *args):
        return aidi_vision_py.Evaluator_eval(self, *args)

    def eval_and_check(self, *args):
        return aidi_vision_py.Evaluator_eval_and_check(self, *args)

    def export_report(self):
        return aidi_vision_py.Evaluator_export_report(self)

    def save_report(self, *args):
        return aidi_vision_py.Evaluator_save_report(self, *args)

    def print_report(self):
        return aidi_vision_py.Evaluator_print_report(self)
    __swig_destroy__ = aidi_vision_py.delete_Evaluator

# Register Evaluator in aidi_vision_py:
aidi_vision_py.Evaluator_swigregister(Evaluator)

def Evaluator_ShowHelp(*args):
    return aidi_vision_py.Evaluator_ShowHelp(*args)


def locale_to_utf8(p):
    return aidi_vision_py.locale_to_utf8(p)

def utf8_to_locale(p):
    return aidi_vision_py.utf8_to_locale(p)

def is_locale_encoding_path(p):
    return aidi_vision_py.is_locale_encoding_path(p)

def edit_test_param(*args):
    return aidi_vision_py.edit_test_param(*args)

def image2numpy(image):
    return aidi_vision_py.image2numpy(image)

def numpy2image(np):
    return aidi_vision_py.numpy2image(np)


